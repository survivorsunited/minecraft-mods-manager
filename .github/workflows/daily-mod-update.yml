name: Daily Mod Update and Release Pipeline

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      force_all:
        description: 'Force create all enabled versions (ignore update check)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  # Job 1: Validate and update mod database
  update-database:
    runs-on: windows-latest
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      versions_matrix: ${{ steps.set_matrix.outputs.matrix }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 2  # Need previous commit to compare
      
      - name: Validate Mod Versions
        shell: pwsh
        run: |
            Write-Host "🔍 Checking for mod updates..." -ForegroundColor Cyan
            .\ModManager.ps1 -ValidateAllModVersions -UpdateModList
    
      - name: Check for Database Changes
        id: check_updates
        shell: pwsh
        run: |
            git diff --quiet modlist.csv
            if ($LASTEXITCODE -ne 0) {
              Write-Host "📦 Mod updates detected in database" -ForegroundColor Green
              
              # Show what changed
              Write-Host "📊 Changes summary:" -ForegroundColor Cyan
              git diff --stat modlist.csv
              
              echo "has_updates=true" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "✅ No mod updates found" -ForegroundColor Gray
              echo "has_updates=false" >> $env:GITHUB_OUTPUT
            }
      
      - name: Read Enabled Versions from Config
        id: set_matrix
        shell: pwsh
        run: |
          $config = Get-Content release-config.json | ConvertFrom-Json
          $enabledVersions = $config.versions | Where-Object { $_.enabled -eq $true } | Select-Object -ExpandProperty version
          $matrixJson = $enabledVersions | ConvertTo-Json -Compress
          echo "matrix=$matrixJson" >> $env:GITHUB_OUTPUT
          
          Write-Host "📋 Enabled versions for release:" -ForegroundColor Cyan
          $enabledVersions | ForEach-Object { Write-Host "   - $_" -ForegroundColor Gray }
      
      - name: Commit Database Updates
        if: steps.check_updates.outputs.has_updates == 'true'
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add modlist.csv
          git commit -m "chore: Daily mod update - $(Get-Date -Format 'yyyy-MM-dd')"
          git push
  
  # Job 2: Create release packages for enabled versions
  create-releases:
    needs: update-database
    # Run if: updates detected OR manual force OR scheduled run
    if: |
      needs.update-database.outputs.has_updates == 'true' || 
      github.event.inputs.force_all == 'true' ||
      github.event_name == 'schedule'
    
    runs-on: windows-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.update-database.outputs.versions_matrix) }}
      fail-fast: false  # Continue even if one version fails
      max-parallel: 3   # Limit parallel builds
    
    steps:
      - name: Checkout Repository with Submodules
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest with updated modlist.csv
          submodules: true  # Clone minecraft-mod-hash submodule
      
      - name: Create Release Package for ${{ matrix.version }}
        id: create_release
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "🚀 Creating release package for Minecraft ${{ matrix.version }}" -ForegroundColor Cyan
          Write-Host "=================================================" -ForegroundColor Cyan
          Write-Host ""
          
          # This will:
          # 1. Download mods for the version
          # 2. Download server files
          # 3. Validate by starting the server
          # 4. Organize mods (mandatory/optional)
          # 5. Generate hashes and documentation
          # 6. Create ZIP package
          # 7. Exit 0 if successful, 1 if server validation fails
          
          .\ModManager.ps1 -CreateRelease -GameVersion "${{ matrix.version }}"
      
      - name: Check Release Creation Result
        id: check_result
        shell: pwsh
        run: |
          if ("${{ steps.create_release.outcome }}" -eq "success") {
            Write-Host "✅ Version ${{ matrix.version }}: Release created successfully" -ForegroundColor Green
            echo "created=true" >> $env:GITHUB_OUTPUT
                } else {
            Write-Host "❌ Version ${{ matrix.version }}: Server validation failed - no release created" -ForegroundColor Red
            echo "created=false" >> $env:GITHUB_OUTPUT
          }
      
      - name: Upload Release Artifact
        if: steps.check_result.outputs.created == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: modpack-${{ matrix.version }}
          path: releases/${{ matrix.version }}/**
          retention-days: 90
          compression-level: 0  # Files already compressed in ZIP
      
      - name: Log Validation Failure
        if: steps.check_result.outputs.created == 'false'
        shell: pwsh
        run: |
          Write-Host "❌ Release package NOT created for version ${{ matrix.version }}" -ForegroundColor Red
          Write-Host "💡 Server validation failed - check logs for mod compatibility issues" -ForegroundColor Yellow
  
  # Job 3: Create GitHub Release with artifacts
  publish-release:
    needs: [update-database, create-releases]
    if: needs.create-releases.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.release_info.outputs.tag }}
      timestamp: ${{ steps.release_info.outputs.timestamp }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Rename Files to Include Version Numbers
        shell: bash
        run: |
          echo "📝 Renaming files to include version numbers..."
          
          # For each artifact directory (modpack-1.21.5, modpack-1.21.8, etc.)
          for artifact_dir in artifacts/modpack-*/; do
            if [ -d "$artifact_dir" ]; then
              # Extract version from directory name (modpack-1.21.5 -> 1.21.5)
              version=$(basename "$artifact_dir" | sed 's/modpack-//')
              echo "  Processing version: $version"
              
              # Rename files to include version
              if [ -f "$artifact_dir/modpack.zip" ]; then
                mv "$artifact_dir/modpack.zip" "$artifact_dir/modpack-$version.zip"
                echo "    ✓ Renamed modpack.zip -> modpack-$version.zip"
              fi
              
              if [ -f "$artifact_dir/hash.txt" ]; then
                mv "$artifact_dir/hash.txt" "$artifact_dir/hash-$version.txt"
                echo "    ✓ Renamed hash.txt -> hash-$version.txt"
              fi
              
              if [ -f "$artifact_dir/README.md" ]; then
                mv "$artifact_dir/README.md" "$artifact_dir/README-$version.md"
                echo "    ✓ Renamed README.md -> README-$version.md"
              fi
              
              # Rename signature files
              for sig in md5 sha1 sha256 sha512; do
                if [ -f "$artifact_dir/modpack.zip.$sig" ]; then
                  mv "$artifact_dir/modpack.zip.$sig" "$artifact_dir/modpack-$version.zip.$sig"
                  echo "    ✓ Renamed modpack.zip.$sig -> modpack-$version.zip.$sig"
                fi
              done
            fi
          done
          
          echo "✅ All files renamed successfully"
      
      - name: Generate Release Tag and Notes
        id: release_info
        shell: bash
        run: |
          # Generate timestamp-based tag
          TIMESTAMP=$(date -u '+%Y.%m.%d-%H%M%S')
          TAG="release-${TIMESTAMP}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          
          # Generate release notes
          cat > release-notes.md << EOF
          # Minecraft Modpack Release - ${TIMESTAMP}
          
          ## 📦 Included Versions
          $(echo '${{ needs.update-database.outputs.versions_matrix }}' | jq -r '.[] | "- **" + . + "**"')
          
          ## 📋 Changes
          - Mod database updated: ${{ needs.update-database.outputs.has_updates }}
          - Server validation: All enabled versions passed
          
          ## 📥 Download Instructions
          
          1. Download the ZIP file for your Minecraft version
          2. Extract to your \`.minecraft\` folder
          3. Install required mods from the \`mods/\` directory
          4. Optional mods are in \`mods/optional/\`
          5. See \`README.md\` for complete installation guide
          
          ## 🔐 Hash Verification
          
          Each package includes signature files:
          - \`modpack.zip.md5\` - MD5 checksum
          - \`modpack.zip.sha1\` - SHA1 checksum
          - \`modpack.zip.sha256\` - SHA256 checksum
          - \`modpack.zip.sha512\` - SHA512 checksum
          
          ## ℹ️ Release Information
          
          - **Created**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Workflow**: Daily Mod Update Pipeline
          - **Validation**: Server startup tested for each version
          
          ## 🔗 InertiaAntiCheat Integration
          
          Use \`hash.txt\` to configure InertiaAntiCheat server validation.
          See included \`README.md\` for details.
          EOF
          
          cat release-notes.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.tag }}
          name: Modpack Release ${{ steps.release_info.outputs.timestamp }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/*/modpack-*.zip
            artifacts/*/modpack-*.zip.md5
            artifacts/*/modpack-*.zip.sha1
            artifacts/*/modpack-*.zip.sha256
            artifacts/*/modpack-*.zip.sha512
            artifacts/*/hash-*.txt
            artifacts/*/README-*.md
  
  # Job 4: Summary report
  summary:
    needs: [update-database, create-releases, publish-release]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Pipeline Summary
        shell: bash
        run: |
            echo "## Daily Mod Update and Release Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Run Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Mod Updates Detected:** ${{ needs.update-database.outputs.has_updates }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Enabled Versions:** $(echo '${{ needs.update-database.outputs.versions_matrix }}' | jq -r '. | join(", ")')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.create-releases.result }}" == "success" ]; then
              echo "✅ **Release Creation:** Completed successfully" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.create-releases.result }}" == "skipped" ]; then
              echo "⏭️ **Release Creation:** Skipped (no updates)" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Release Creation:** Some versions failed server validation" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "${{ needs.publish-release.result }}" == "success" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ **GitHub Release:** Published successfully" >> $GITHUB_STEP_SUMMARY
              echo "🔗 **Release Tag:** \`${{ needs.publish-release.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
              echo "🏷️ **Timestamp:** ${{ needs.publish-release.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.publish-release.result }}" == "skipped" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "⏭️ **GitHub Release:** Skipped" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Run:** Tomorrow at 2:00 AM UTC" >> $GITHUB_STEP_SUMMARY 