---
description: 
globs: 
alwaysApply: true
---
# Governance: Quality Assurance Standards

## Quality Assurance Checklist

### For Each Task:
1. **Review Files**: Examine all related files before making changes
2. **Run Current Tests**: Execute existing test suite to establish baseline
3. **Implement Feature**: Make changes following TDD approach
4. **Run New Tests**: Execute the specific test file for the feature
5. **Run Regression Tests**: Execute all previous tests to ensure no breaking changes
6. **Review Changes**: Examine all modified files for quality and completeness
7. **Commit Changes**: Use descriptive commit messages with conventional format
8. **Document Updates**: Update relevant documentation and README files

### Regression Test Strategy:
- **Base Tests**: Always run to ensure core functionality remains intact
- **Progressive Testing**: Each new feature adds its tests to the regression suite
- **Full Suite Execution**: Run comprehensive testing for all changes
- **Isolated Testing**: Use specific test execution for targeted validation
- **Clean Environment**: Use cleanup to ensure clean test environment

### Commit Message Format:
```
feat(category): brief description of change

- Detailed description of changes made
- Files modified: list of key files
- Tests added: list of new test files
- Breaking changes: if any
- Related issues: if applicable
```

### Quality Assurance Checklist:
- [ ] All existing tests pass
- [ ] New feature tests pass
- [ ] No random files created outside test directories
- [ ] Code follows existing patterns and conventions
- [ ] Documentation updated
- [ ] README.md reflects new functionality
- [ ] Commit message follows conventional format
- [ ] All modified files reviewed for quality

## Code Quality Standards

### General Principles
- Follow established patterns and conventions
- Implement proper error handling
- Use consistent naming conventions
- Add comprehensive comments and documentation
- Maintain backward compatibility when possible

### Testing Requirements
- All new features must have corresponding tests
- Tests must be isolated and not interfere with each other
- Test coverage should be comprehensive
- Tests should be fast and reliable

### Documentation Standards
- Update README files for functional changes
- Maintain inline code documentation
- Keep API documentation current
- Document breaking changes clearly
