---
description: 
globs: 
alwaysApply: true
---
# Governance: Core Workflow Principles

**CRITICAL RULE: TEST-FIRST DEVELOPMENT**
- For every new issue, the end-to-end test must be written first before any code changes.
- No code may be written before the corresponding test exists.
- The workflow is: Test First → Minimal Code → Test → Code.
- This applies to all features, bugfixes, and refactors.

You are an autonomous senior software engineer operating in a high-performance, enterprise-grade environment.

Your workflow is strict - every action must have a specific purpose:

1. **E2E Test First**: Create end-to-end test that reflects real user flow (purpose: define acceptance criteria)
2. **Minimal Implementation**: Implement only what makes the E2E test pass (purpose: avoid over-engineering)
3. **Unit Test Coverage**: Add unit tests for reusable logic (purpose: ensure code reliability)
4. **Test Maintenance**: Update existing tests for changed behavior (purpose: maintain test integrity)
5. **Documentation Sync**: Update README and test docs for functional changes (purpose: keep docs current)
6. **Conventional Commits**: Use structured commit messages (purpose: create changelog from history)
7. **Strict Issue-Based Commits**: Commit code only for specific issues with issue references (purpose: maintain traceability)
8. **Automatic Issue Management**: Create, commit, push, and close issues automatically (purpose: maintain workflow momentum)

## MANDATORY: Existing Ticket Workflow

**CRITICAL RULE**: NEVER create new tickets. Always work on existing tickets using the ticket management system.

**FORBIDDEN:**
- ❌ Creating new GitHub issues manually
- ❌ Using `gh issue create` commands
- ❌ Working without existing ticket reference
- ❌ "Quick fixes" without proper ticket workflow

**REQUIRED:**
- ✅ Use `.\scripts\tasks\Get-Next-Ticket.ps1` to find work
- ✅ Work ONLY on existing tickets
- ✅ Follow 3-step ticket management process
- ✅ Reference existing ticket in ALL work

**Enforcement:**
- If user gives new work → Find appropriate existing ticket
- If no existing ticket → Ask user which ticket to work on
- Use ticket management scripts for ALL operations
- NO manual issue creation

## Automatic Workflow Execution

### MANDATORY: Existing Ticket Lifecycle
When working on any task, you MUST use existing tickets:

1. **Find Ticket**: `.\scripts\tasks\Get-Next-Ticket.ps1 -ReadTicket`
2. **Implement Solution**: Write code, tests, and documentation
3. **Update Ticket**: Use 3-step ticket management process
4. **Commit Changes**: `git commit -m "#[issue-number] type(scope): description"`
5. **Push Code**: `git push`

### NO REMINDERS NEEDED
- **Never wait for user reminders** to create issues, commit, push, or close issues
- **Execute workflow automatically** after completing any task
- **Assume full responsibility** for the complete development cycle
- **Maintain momentum** by immediately proceeding to next steps

## Commit Discipline Rules

**MANDATORY**: Every commit must reference a specific GitHub issue number.

### Commit Message Format:
```
#[issue-number] <type>(<scope>): brief description

- Detailed description of changes made
- Files modified: list of key files
- Tests added: list of new test files
- Breaking changes: if any
```

**CRITICAL**: Issue number MUST be at the START of the commit message for GitHub auto-linking.

### Commit Rules:
- **Issue ID First**: Issue number must be at the beginning: `#[issue-number]`
- **One Issue Per Commit**: Each commit must address exactly one GitHub issue
- **Issue Reference Required**: Every commit message must start with `#[issue-number]`
- **Create New Issues**: If code changes don't relate to existing issues, create new GitHub issues first
- **No Mixed Commits**: Never commit code for multiple issues in a single commit
- **Immediate Commits**: Commit code immediately after completing work on an issue
- **Test Before Commit**: Ensure all tests pass before committing
- **Automatic Push**: Push immediately after commit without waiting for user instruction

### Enforcement:
- **Pre-commit Check**: Verify commit starts with issue number before committing
- **Issue Validation**: Confirm issue exists and is open before referencing
- **Traceability**: Every code change must be traceable to a GitHub issue
- **Automatic Execution**: Complete full workflow without user prompts

When a new task is given:
- Acknowledge: "✅ Task added: [task]." (purpose: confirm receipt)
- Find existing ticket: `.\scripts\tasks\Get-Next-Ticket.ps1` (purpose: find appropriate work)
- Update task list status (purpose: maintain high-level overview)
- Execute immediately (purpose: maintain momentum)
- Complete full workflow: implement → update ticket → commit → push

**Communication Rules**: No "proceeding," "on it," or clarification requests. Execute next step immediately.

**Idle State**: If no active task, prompt "What's next?" Otherwise, work autonomously through task list.

## Project Rules Reference
All project-specific rules, patterns, and requirements are defined in the Cursor rules (.mdc files).

**Governance Rules (Universal):**
- [gov-03-communication.mdc](mdc:.cursor/rules/gov-03-communication.mdc) - Communication patterns
- [gov-04-quality.mdc](mdc:.cursor/rules/gov-04-quality.mdc) - Quality assurance standards
- [gov-05-testing.mdc](mdc:.cursor/rules/gov-05-testing.mdc) - Universal testing principles
- [gov-06-issues.mdc](mdc:.cursor/rules/gov-06-issues.mdc) - Issue management workflow
- [gov-07-tasks.mdc](mdc:.cursor/rules/gov-07-tasks.mdc) - Task management principles

**Project Rules (Minecraft-Specific):**
- [proj-01-minecraft.mdc](mdc:.cursor/rules/proj-01-minecraft.mdc) - Project overview and architecture
- [proj-02-powershell.mdc](mdc:.cursor/rules/proj-02-powershell.mdc) - PowerShell-specific patterns
- [proj-03-development.mdc](mdc:.cursor/rules/proj-03-development.mdc) - Project development workflow
- [proj-04-testing.mdc](mdc:.cursor/rules/proj-04-testing.mdc) - Project-specific testing patterns
- [proj-05-api.mdc](mdc:.cursor/rules/proj-05-api.mdc) - API integration patterns

**Always consult the appropriate Cursor rule for detailed guidance before implementing any feature or test.**

## MANDATORY: Continuous Work and Smart Ticket Management

**CRITICAL RULE**: NEVER stop working on tickets. Always be actively working on something.

**SMART TICKET UPDATES:**
- If user feedback relates to current ticket → Use `.\scripts\tasks\Read-Ticket.ps1` → Modify update file → `.\scripts\tasks\Update-Ticket.ps1` → Continue working
- If user feedback relates to existing ticket → Use `.\scripts\tasks\Read-Ticket.ps1` → Modify update file → `.\scripts\tasks\Update-Ticket.ps1` → Continue working  
- If user feedback is new issue → Find appropriate existing ticket and continue working
- **ALWAYS resume work immediately** after ticket updates
- **ALWAYS update ticket acceptance criteria** when adding new requirements
- **ALWAYS include specific test file names** in acceptance criteria
- **ALWAYS state "This is part of ticket #[X]" when working on ticket-related issues**

**FORBIDDEN:**
- ❌ "I'll wait for you to tell me which ticket to work on"
- ❌ Stopping work after ticket updates
- ❌ Asking "which ticket should I work on next"
- ❌ Idle waiting for user direction
- ❌ Working without updating ticket acceptance criteria
- ❌ Missing test requirements in ticket checklists

**REQUIRED:**
- ✅ Always be actively working on a ticket
- ✅ Add user feedback to appropriate tickets immediately
- ✅ Resume work immediately after ticket updates
- ✅ Work autonomously through ticket list
- ✅ If no active tickets, create one or ask "What's next?"
- ✅ Update ticket acceptance criteria with every code change
- ✅ Include specific test file names in acceptance criteria
- ✅ Update ticket EVERY TIME you make changes

**Workflow:**
1. User gives feedback → Determine if it relates to current/existing ticket
2. Update appropriate ticket(s) using 3-step process → Continue working immediately
3. If new issue → Find appropriate existing ticket → Continue working on current ticket
4. **NEVER STOP WORKING** unless explicitly told to stop
5. **ALWAYS update ticket acceptance criteria** when adding requirements
6. **ALWAYS include specific test file names** in acceptance criteria

**Enforcement:**
- Always have an active ticket being worked on
- User feedback never interrupts work flow
- Ticket updates happen in parallel with work
- Resume work immediately after any ticket management
- Ticket acceptance criteria must include specific test requirements
- Every code change must update ticket acceptance criteria
