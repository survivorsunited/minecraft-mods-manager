---
description: 
globs: 
alwaysApply: true
---
# Governance: Issue Management Workflow

## Issue Management Strategy

### Issue Creation Process
- Use GitHub CLI (`gh`) for issue management
- Create issues for all bugs, features, and development tasks
- Use appropriate labels and assignees
- Reference existing issues when creating related ones

### MANDATORY: Single Purpose Tickets
**CRITICAL RULE**: Every ticket must have ONE specific, actionable purpose.

**FORBIDDEN:**
- ❌ "Refactor some stuff" 
- ❌ "Fix various issues"
- ❌ "Improve multiple things"
- ❌ "Update dependencies and fix bugs and add features"

**REQUIRED:**
- ✅ "Fix Next Steps Logic - Remove confusing update message"
- ✅ "Add GameVersion compatibility check to status icons"
- ✅ "Split LatestDependencies into Required and Optional fields"
- ✅ "Add URL display for mods without latest versions"

**Enforcement:**
- Each ticket must address exactly ONE problem or feature
- If multiple issues exist, create separate tickets
- Ticket title must clearly state the single purpose
- Ticket body must focus on that one specific issue

### MANDATORY: Acceptance Criteria Structure
**CRITICAL RULE**: Acceptance Criteria must describe WHAT the feature should do, not HOW to implement it.

**FORBIDDEN:**
- ❌ Acceptance Criteria as implementation tasks
- ❌ Acceptance Criteria as to-do lists
- ❌ Acceptance Criteria without specific behavior descriptions

**REQUIRED:**
- ✅ Acceptance Criteria as behavior descriptions
- ✅ Acceptance Criteria using "When [condition], then [expected result]" format
- ✅ Acceptance Criteria that define success criteria
- ✅ Separate "Implementation Tasks" section for HOW to implement
- ✅ Separate "Tests Required" section for specific test files

**Enforcement:**
- Acceptance Criteria must focus on user-visible behavior
- Implementation details go in separate "Implementation Tasks" section
- Test requirements go in separate "Tests Required" section
- Every acceptance criterion must be testable

### Issue Categories
- **Bug Reports**: Issues with existing functionality
- **Feature Requests**: New functionality or improvements
- **Development Tasks**: Technical debt, refactoring, testing
- **Documentation**: README updates, code comments, guides

### MANDATORY: Test Requirements
**CRITICAL RULE**: Every issue must include specific test requirements.

**FORBIDDEN:**
- ❌ Issues without test requirements
- ❌ Vague test descriptions like "test the feature"
- ❌ Missing test file names

**REQUIRED:**
- ✅ Specific test file names (e.g., "test/21-TestFeatureName.ps1")
- ✅ Clear test descriptions of what to verify
- ✅ Test requirements that validate acceptance criteria
- ✅ Tests for both positive and negative cases

**Enforcement:**
- Every acceptance criterion must have corresponding test requirements
- Test files must follow naming convention: test/[number]-[Description].ps1
- Tests must verify the specific behavior described in acceptance criteria

### GitHub CLI Commands
```bash
# Create issue with body from file
gh issue create --title "Title" --body-file issue_body.txt --label "bug,high-priority"

# Create issue with inline body
gh issue create --title "Title" --body "Description" --label "feature"

# List issues
gh issue list --state open --label "bug"

# Update issue
gh issue edit 123 --body "Updated description"
```

## Issue Templates

### Bug Report Template
```markdown
## Issue Description
Brief description of the issue

## Current Problem
What's wrong or broken

## Expected Behavior
What should happen when working correctly

## Acceptance Criteria
- When [condition], then [expected result]
- When [condition], then [expected result]
- [Specific behavior that defines success]

## Implementation Tasks
- [ ] Task 1
- [ ] Task 2
- [ ] Task 3

## Tests Required
- [ ] Create test/[number]-[Description].ps1
- [ ] Test specific behavior
- [ ] Test edge cases

## Additional Context
Any other relevant information
```

### Feature Request Template
```markdown
## Feature Description
Brief description of the requested feature

## Use Case
Why this feature is needed

## Expected Behavior
What the feature should do when working correctly

## Acceptance Criteria
- When [condition], then [expected result]
- When [condition], then [expected result]
- [Specific behavior that defines success]

## Implementation Tasks
- [ ] Task 1
- [ ] Task 2
- [ ] Task 3

## Tests Required
- [ ] Create test/[number]-[Description].ps1
- [ ] Test specific behavior
- [ ] Test edge cases

## Additional Context
Any other relevant information
```

## Issue Tracking Integration

### Task List Integration
- Task list tracks high-level project status
- GitHub issues track specific implementation details
- Keep task list focused on project milestones
- Move detailed development tasks to GitHub issues

### Label Strategy
- **Priority**: `high-priority`, `medium-priority`, `low-priority`
- **Type**: `bug`, `feature`, `enhancement`, `documentation`
- **Component**: `core`, `testing`, `pipeline`, `api`
- **Status**: `ready`, `in-progress`, `blocked`, `needs-review`

## Workflow Integration

### Development Workflow
1. Create GitHub issue for new task
2. Define acceptance criteria as behavior descriptions
3. Add specific test requirements with file names
4. Reference issue in commit messages
5. Update issue acceptance criteria when requirements change
6. Update issue status as work progresses
7. Close issue when complete

### MANDATORY: Issue Updates During Development
**CRITICAL RULE**: Update issue acceptance criteria whenever requirements change during development.

**FORBIDDEN:**
- ❌ Working on issues without updating acceptance criteria
- ❌ Adding requirements without updating issue
- ❌ Changing scope without updating issue

**REQUIRED:**
- ✅ Update acceptance criteria when new requirements discovered
- ✅ Add test requirements for new acceptance criteria
- ✅ Update issue immediately when scope changes
- ✅ Reflect all changes in issue before committing code

**Enforcement:**
- Every code change must be reflected in issue acceptance criteria
- New requirements discovered during development must be added to issue
- Issue must always match current implementation scope

### Testing Integration
- Create issues for test failures
- Reference test files in issue descriptions
- Track test improvements as separate issues

### Pipeline Integration
- Monitor CI/CD for failures
- Create issues for pipeline problems
- Track deployment and release issues

## Issue Maintenance

### Regular Reviews
- Review open issues weekly
- Update stale issues
- Close completed issues
- Merge duplicate issues

### Issue Cleanup
- Remove outdated labels
- Update issue templates
- Archive resolved issues
- Maintain issue searchability
