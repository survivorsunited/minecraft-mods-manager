---
description: 
globs: 
alwaysApply: true
---
# Project: Minecraft Mods Manager Development Workflow

## Quick Start Commands

### Running Tests
```powershell
# Run all tests
.\test\RunAllTests.ps1 -All

# Run specific test
.\test\tests\12-TestLatestWithServer.ps1

# Run multiple specific tests
.\test\RunAllTests.ps1 -TestFiles "01-BasicFunctionality.ps1","02-DownloadFunctionality.ps1"
```

### ModManager Operations
```powershell
# Download latest mods
.\ModManager.ps1 -Download -UseLatestVersion -DownloadFolder "download" -DatabaseFile "modlist.csv"

# Update mod database to latest versions
.\ModManager.ps1 -UpdateMods -DatabaseFile "modlist.csv"

# Download server files
.\ModManager.ps1 -DownloadServer -DownloadFolder "download"

# Start server
.\ModManager.ps1 -StartServer -DownloadFolder "download"
```

## Development Environment Setup

### Required Files
- [ModManager.ps1](mdc:ModManager.ps1) - Main script with CLI parameters and core functionality
- [modlist.csv](mdc:modlist.csv) - Mod database with current and latest version information
- [test/TestFramework.ps1](mdc:test/TestFramework.ps1) - Shared test utilities and functions

### PowerShell Configuration
```powershell
# Set execution policy for script execution
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

# Verify PowerShell version (7.0+ recommended)
$PSVersionTable.PSVersion
```

## Common Development Tasks

### Adding New Tests
1. Create test file in [test/tests/](mdc:test/tests) following naming convention `{number}-{Description}.ps1`
2. Use [test/TestFramework.ps1](mdc:test/TestFramework.ps1) utilities
3. Implement test isolation with `$TestDownloadDir`
4. Add test to [test/RunAllTests.ps1](mdc:test/RunAllTests.ps1) if needed

### Modifying ModManager
1. Update [ModManager.ps1](mdc:ModManager.ps1) with new functionality
2. Add corresponding tests in [test/tests/](mdc:test/tests)
3. Update [modlist.csv](mdc:modlist.csv) if adding new mods
4. Test with isolated test directories

### Debugging Issues
1. Check test logs in `test/test-output/{TestName}/`
2. Review server logs for error messages
3. Verify mod downloads in download folders
4. Check API response cache in [test/apiresponse/](mdc:test/apiresponse)

## Testing Workflow

### Local Development Testing
1. **Quick Test**: Run individual test file
2. **Full Test**: Run `test/RunAllTests.ps1 -All`
3. **Specific Test**: Use `-TestFiles` parameter
4. **Clean Test**: Use `-Cleanup` to remove test artifacts

### Pipeline Testing
1. **Push to main/develop**: Triggers automated testing
2. **Pull Request**: Runs tests across Windows/Linux/macOS
3. **Manual Trigger**: Use workflow dispatch for on-demand testing
4. **Artifact Review**: Download artifacts from GitHub Actions

## File Organization

### Test Structure
```
test/
├── tests/                       # Individual test files
│   ├── 01-BasicFunctionality.ps1
│   ├── 02-DownloadFunctionality.ps1
│   └── 12-TestLatestWithServer.ps1
├── test-output/                 # Test execution outputs
│   ├── 01-BasicFunctionality/
│   ├── 02-DownloadFunctionality/
│   └── 12-TestLatestWithServer/
├── apiresponse/                 # Cached API responses
├── RunAllTests.ps1             # Main test runner
├── TestFramework.ps1           # Shared test utilities
└── GenerateTestResults.ps1     # Test result generation
```

### Artifact Locations
- **Test Outputs**: `test/test-output/{TestName}/`
- **Download Folders**: `test/test-output/{TestName}/download/`
- **Test Logs**: `test/test-output/{TestName}/*.log`
- **Test Reports**: `test/test-output/{TestName}/*-test-report.txt`

## Common Patterns

### Test Function Structure
```powershell
function Invoke-{TestName} {
    param([string]$TestFileName = $null)
    
    Write-TestSuiteHeader "Test Description" $TestFileName
    
    # Test steps
    $result1 = Test-Step1
    $result2 = Test-Step2
    
    # Summary
    Write-TestSuiteSummary "Test Description"
    
    return ($result1 -and $result2)
}
```

### ModManager Integration
```powershell
# Standard ModManager call pattern
$result = & pwsh -NoProfile -ExecutionPolicy Bypass -File $ModManagerPath `
    -Parameter1 -Parameter2 `
    -DatabaseFile $ModListPath `
    -DownloadFolder $TestDownloadDir `
    -UseCachedResponses
```

### Error Handling
```powershell
try {
    $result = & $ModManagerPath -Parameter -Value
    if ($LASTEXITCODE -ne 0) {
        Write-Host "Command failed with exit code: $LASTEXITCODE"
        return $false
    }
} catch {
    Write-Host "Exception: $($_.Exception.Message)"
    return $false
}
```

## Performance Optimization

### API Caching
- Use `-UseCachedResponses` for faster testing
- API responses cached in [test/apiresponse/](mdc:test/apiresponse)
- Download results in [test/apiresponse/mod-download-results.csv](mdc:test/apiresponse/mod-download-results.csv)

### Test Execution
- Run individual tests for faster iteration
- Use isolated download directories to prevent interference
- Leverage pipeline parallel execution across OS platforms

## Troubleshooting

### Common Issues
1. **Execution Policy**: Ensure PowerShell allows script execution
2. **Path Issues**: Use absolute paths or proper relative paths
3. **Test Isolation**: Ensure tests don't interfere with each other
4. **API Rate Limits**: Use cached responses for testing

### Debug Steps
1. Check PowerShell execution policy
2. Verify file paths and permissions
3. Review test logs for error messages
4. Check API response cache
5. Validate test isolation

## Integration Points

### CI/CD Pipeline
- [.github/workflows/test.yml](mdc:.github/workflows/test.yml) - Automated testing
- [test/GenerateTestResults.ps1](mdc:test/GenerateTestResults.ps1) - Result generation
- [test/GenerateTestSummary.ps1](mdc:test/GenerateTestSummary.ps1) - Summary reports

### External APIs
- Modrinth API for mod information
- CurseForge API for mod downloads
- Mojang API for server files
- Fabric API for launcher files
