# =============================================================================
# Add Server Start Script Function
# =============================================================================
# This function creates a server startup script for testing mods
# =============================================================================

<#
.SYNOPSIS
    Creates a server startup script for testing mods.
.DESCRIPTION
    Creates a PowerShell script that can start a Minecraft server with the downloaded mods
    for testing purposes.
.PARAMETER DownloadFolder
    The download folder containing mods and server files.
.EXAMPLE
    Add-ServerStartScript -DownloadFolder "download"
#>
function Add-ServerStartScript {
    param(
        [Parameter(Mandatory=$true)]
        [string]$DownloadFolder
    )

    try {
        # Find the most common game version in the download folder
        $versionFolders = Get-ChildItem -Path $DownloadFolder -Directory | Where-Object { $_.Name -match '^\d+\.\d+\.\d+$' }
        
        if ($versionFolders.Count -eq 0) {
            Write-Host "No version folders found in $DownloadFolder" -ForegroundColor Red
            return $false
        }

        # Get the most recent version folder
        $latestVersionFolder = $versionFolders | Sort-Object Name -Descending | Select-Object -First 1
        $gameVersion = $latestVersionFolder.Name
        $serverPath = Join-Path $DownloadFolder $gameVersion

        # Create server start script content
        $scriptContent = @"
# Minecraft Server Start Script
# Generated by ModManager for testing mods
# Game Version: $gameVersion

Write-Host "Starting Minecraft Server for testing mods..." -ForegroundColor Green
Write-Host "Game Version: $gameVersion" -ForegroundColor Cyan
Write-Host "Server Path: $serverPath" -ForegroundColor Cyan

# Check if server JAR exists
`$serverJar = Join-Path `$PSScriptRoot "minecraft_server.$gameVersion.jar"
if (-not (Test-Path `$serverJar)) {
    Write-Host "Error: Server JAR not found at `$serverJar" -ForegroundColor Red
    exit 1
}

# Check if mods folder exists
`$modsFolder = Join-Path `$PSScriptRoot "mods"
if (-not (Test-Path `$modsFolder)) {
    Write-Host "Error: Mods folder not found at `$modsFolder" -ForegroundColor Red
    exit 1
}

# Count mods
`$modCount = (Get-ChildItem -Path `$modsFolder -Filter "*.jar" | Measure-Object).Count
Write-Host "Found `$modCount mods to test" -ForegroundColor Green

# Start server with mods
Write-Host "Starting server..." -ForegroundColor Yellow
Write-Host "Press Ctrl+C to stop the server" -ForegroundColor Gray

# Start the server
java -Xmx2G -Xms1G -jar `$serverJar nogui

Write-Host "Server stopped" -ForegroundColor Green
"@

        # Write the script to the server folder
        $scriptPath = Join-Path $serverPath "start-server.ps1"
        $scriptContent | Out-File -FilePath $scriptPath -Encoding UTF8

        Write-Host "‚úÖ Server start script created: $scriptPath" -ForegroundColor Green
        Write-Host "üìÅ Server folder: $serverPath" -ForegroundColor Cyan
        Write-Host "üéÆ Game version: $gameVersion" -ForegroundColor Cyan
        
        return $true

    } catch {
        Write-Host "Error creating server start script: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
} 